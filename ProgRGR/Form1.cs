namespace ProgRGR
{
    public partial class Form1 : Form
    {
        private readonly FormController _formController;
        private FileController _fileController;
        public Form1(FormController controller)
        {
            InitializeComponent();
            InitializeHotkeys();
            _formController = controller;
            _formController.Errors += ShowError;
        }

        private void OpenFile_Click(object sender, EventArgs e)
        {
            if (_formController.OpenFile())
            {
            dataGridView1.Rows.Clear();
                DisplayData(_formController.SelectedView);
                flag = true;
        }
        }

        private void DisplayData(int view)
        {
            (int lastRow, int lastColumnIndex) = GetLastRowAndColumnIndex();
            List<DataRow> data = _formController.GetData(lastRow, lastColumnIndex, view);
            string numberRow = Convert.ToString(lastRow, view).PadLeft(10, '0').ToUpper() + "0";
            if (data.Count == 0)
                return;
            
            dataGridView1.SuspendLayout();

            List<DataRow> data = _fileController.GetDataHex(lastRow, lastColumnIndex);
            int currentRow;

            if (data.Count == 0) return;

            foreach (var dataRow in data)
            {

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ DataGridView —Å—Ç—Ä–æ–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º
                bool isExistingRow = dataRow.numberRow == numberRow && lastRow != 0;
                DataGridViewRow row;

                if (isExistingRow)
                {
                    row = dataGridView1.Rows[lastRow];
                    lastColumnIndex++;

                    // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ, –Ω–∞—á–∏–Ω–∞—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—É—Å—Ç–æ–π —è—á–µ–π–∫–∏
                    for (int i = 0; i < dataRow.data.Count && lastColumnIndex + i < row.Cells.Count; i++)
                    {
                        row.Cells[lastColumnIndex + i].Value = dataRow.data[i];
                    }
                }
                else
                {
                    // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
                    row = new DataGridViewRow();
                    row.CreateCells(dataGridView1);
                    row.Cells[0].Value = dataRow.numberRow;

                    // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å –Ω–∞—á–∞–ª–∞ (–∏–ª–∏ —Å lastColumnIndex, –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ)
                    int startColumn = 1;
                    for (int i = 0; i < dataRow.data.Count && startColumn + i < row.Cells.Count; i++)
                    {
                        row.Cells[startColumn + i].Value = dataRow.data[i];
                    }

                    dataGridView1.Rows.Add(row);
                }
            }

            dataGridView1.ResumeLayout();
        }

        private void FormClose(object sender, EventArgs e)
        {
            DialogResult res = MessageBox.Show("¬˚ ‰ÂÈÒÚ‚ËÚÂÎ¸ÌÓ ıÓÚËÚÂ Á‡Í˚Ú¸ ÔËÎÓÊÂÌËÂ?", "¬˚ıÓ‰ ËÁ ÔËÎÓÊÂÌËˇ", MessageBoxButtons.YesNo);
            if (res == DialogResult.Yes)
            {
                Close();
            }
        }

        private void Find_Click(object sender, EventArgs e)
        {
            StringFindTextBox.Text = string.Empty;
            Find.ShowDropDown();
            StringFindTextBox.Focus();
        }

        private void Find_DropDownClosed(object sender, EventArgs e)
        {
            StringFindTextBox.Text = "Ctrl+F";
        }

        private void StringFindTextBox_Click(object sender, EventArgs e)
        {
            StringFindTextBox.Text = string.Empty;
        }

        private double GetVerticalScrollPercentage()
        {
            // ≈ÒÎË ÌÂÚ ÒÚÓÍ, ‚ÓÁ‚‡˘‡ÂÏ 0
            if (dataGridView1.RowCount == 0)
                return 0;

            // ≈ÒÎË ‚Ë‰ËÏ˚ ‚ÒÂ ÒÚÓÍË (ÌÂÚ ÌÂÓ·ıÓ‰ËÏÓÒÚË ‚ ÒÍÓÎÎÂ), ‚ÓÁ‚‡˘‡ÂÏ 0
            if (dataGridView1.DisplayedRowCount(true) >= dataGridView1.RowCount)
                return 0;

            // œÓÎÛ˜‡ÂÏ ÚÂÍÛ˘Û˛ ÔÓÁËˆË˛ ÒÍÓÎÎ‡
            int scrollOffset = dataGridView1.FirstDisplayedScrollingRowIndex;

            // Œ·˘ÂÂ ÍÓÎË˜ÂÒÚ‚Ó ÒÚÓÍ, ÍÓÚÓ˚Â ÏÓÊÌÓ ÔÓÍÛÚËÚ¸
            int scrollRange = dataGridView1.RowCount - dataGridView1.DisplayedRowCount(true);

            // ¬˚˜ËÒÎˇÂÏ ÔÓˆÂÌÚ ÔÓÍÛÚÍË
            double percentage = (double)scrollOffset / scrollRange * 100;

            // ŒÍÛ„ÎˇÂÏ ‰Ó 2 ÁÌ‡ÍÓ‚ ÔÓÒÎÂ Á‡ÔˇÚÓÈ
            return Math.Round(percentage, 2);
        }

        private bool flag = true;
        private void dataGridView1_Scroll(object sender, ScrollEventArgs e)
        {
            if (e.ScrollOrientation == ScrollOrientation.VerticalScroll)
            {
                double scrollPercentage = GetVerticalScrollPercentage();
                if (scrollPercentage > 70 && flag == true)
                {
                    int count = dataGridView1.Rows.Count;
                    DisplayData();

                    if (count == dataGridView1.Rows.Count)
                    {
                        flag = false;
                    }
                }
                if (flag == false)
                {
                    _fileController.Close();
                }

        private void Content_Click(object sender, EventArgs e)
        {
            string text = "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–æ–≥—Ä–∞–º–º–æ–π:\r\n\r\n1. –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞  \r\n   - –ù–∞–∂–º–∏—Ç–µ \"–§–∞–π–ª ‚Üí –û—Ç–∫—Ä—ã—Ç—å\" (Ctrl+O)  \r\n   - –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞  \r\n\r\n2. –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö  \r\n   - –ü–µ—Ä–µ–∫–ª—é—á–∞–π—Ç–µ—Å—å –º–µ–∂–¥—É HEX/Binary —á–µ—Ä–µ–∑ –º–µ–Ω—é \"–í–∏–¥\"  \r\n   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–ª–µ—Å–æ –º—ã—à–∏ –∏–ª–∏ –ø–æ–ª–æ—Å—É –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏  \r\n\r\n3. –ü–æ–∏—Å–∫  \r\n   - \"–ü—Ä–∞–≤–∫–∞ ‚Üí –ù–∞–π—Ç–∏\" (Ctrl+F) ‚Äî –ø–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∞–¥—Ä–µ—Å–æ–º  \r\n   - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è HEX –∏ Binary —Å—Ç—Ä–æ–∫–∏\r\n\r\n–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏:  \r\n- Ctrl+O ‚Äî –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª  \r\n- Ctrl+F ‚Äî –ø–æ–∏—Å–∫  \r\n- Ctrl+Q ‚Äî –≤—ã—Ö–æ–¥  \r\n- Ctrl+Shift+H/B ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤–∏–¥ (HEX/Binary)  \r\n";
            MessageBox.Show(text, "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }

        private void About_Click(object sender, EventArgs e)
        {
            string text = "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–æ–≤ –≤ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–æ–º (HEX) –∏ –¥–≤–æ–∏—á–Ω–æ–º (Binary) —Ñ–æ—Ä–º–∞—Ç–µ.\r\n\r\n–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\r\n- –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–æ–≤ –ª—é–±–æ–≥–æ —Ç–∏–ø–∞\r\n- –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤ HEX/Binary\r\n\r\n–ê–≤—Ç–æ—Ä—ã: Dmewtiy, Tairchik  \r\n–í–µ—Ä—Å–∏—è: 1.0  \r\n\r\nGitHub: [—Å—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π, –µ—Å–ª–∏ –µ—Å—Ç—å]  \r\n–ö–æ–Ω—Ç–∞–∫—Ç—ã: [email/—Å–∞–π—Ç]  ";
            MessageBox.Show(text, "Hex/Binary File Viewer v1.0", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }
    }
}